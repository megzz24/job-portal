# Generated by Django 5.2.4 on 2025-10-21 15:04

from django.db import migrations

# Generated by Django 5.2.4 on 2025-10-21 17:35

from django.db import migrations
import random


def add_skills_to_jobseekers(apps, schema_editor):
    JobSeeker = apps.get_model("users", "JobSeeker")
    Skill = apps.get_model("jobs", "Skill")

    jobseekers = list(JobSeeker.objects.all())
    skills = list(Skill.objects.all())

    if not jobseekers or not skills:
        print("⚠️ No jobseekers or skills found — skipping skill assignment.")
        return

    # Define example skill groups (optional if you want logic-based pairing)
    skill_groups = {
        "Engineering": [
            "Python",
            "C++",
            "AutoCAD",
            "Project Management",
            "Problem Solving",
        ],
        "Design": ["Adobe Photoshop", "Illustrator", "Creativity", "UI/UX", "Figma"],
        "Marketing": [
            "SEO",
            "Content Writing",
            "Analytics",
            "Social Media",
            "Communication",
        ],
        "Finance": [
            "Excel",
            "Financial Modeling",
            "Accounting",
            "Data Analysis",
            "Forecasting",
        ],
        "Education": [
            "Teaching",
            "Curriculum Design",
            "Research",
            "Communication",
            "Leadership",
        ],
    }

    # Map skill names to actual Skill instances
    skill_map = {s.name.lower(): s for s in skills}

    for js in jobseekers:
        field = js.field_name or ""
        # Choose matching skill group or random fallback
        chosen_skills = skill_groups.get(
            field, random.sample(skills, min(5, len(skills)))
        )

        # Get Skill objects (filter those that exist)
        skill_objs = [
            skill_map[name.lower()]
            for name in [s for s in [sk for sk in skill_groups.get(field, [])]]
            if name.lower() in skill_map
        ]

        # Fallback to random skills if group is empty
        if not skill_objs:
            skill_objs = random.sample(skills, min(5, len(skills)))

        js.skills.set(skill_objs)
        js.save()

    print(f"✅ Added skills to {len(jobseekers)} jobseekers.")


def remove_skills_from_jobseekers(apps, schema_editor):
    JobSeeker = apps.get_model("users", "JobSeeker")
    for js in JobSeeker.objects.all():
        js.skills.clear()


class Migration(migrations.Migration):

    dependencies = [
        ("users", "0008_auto_20251021_1957"),
    ]

    operations = [
        migrations.RunPython(add_skills_to_jobseekers, remove_skills_from_jobseekers),
    ]
