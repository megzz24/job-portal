# Generated by Django 5.2.4 on 2025-10-21 17:15

from django.db import migrations
from django.utils import timezone
import random


def create_applications(apps, schema_editor):
    Job = apps.get_model("jobs", "Job")
    Application = apps.get_model("jobs", "Application")
    JobSeeker = apps.get_model("users", "JobSeeker")

    jobs = list(Job.objects.all())
    jobseekers = list(JobSeeker.objects.all())

    if not jobs or not jobseekers:
        print("No jobs or jobseekers found — skipping application seeding.")
        return

    statuses = ["applied", "review", "interview", "rejected", "accepted"]

    # Shuffle to randomize application distribution
    random.shuffle(jobs)
    random.shuffle(jobseekers)

    # Distribute 9 applications per jobseeker across available jobs
    seeker_app_map = {js.id: [] for js in jobseekers}
    job_app_count = {job.id: 0 for job in jobs}

    total_applications = len(jobseekers) * 9

    # Generate combinations in a fair distributed way
    all_jobs_cycle = jobs * ((total_applications // len(jobs)) + 1)
    random.shuffle(all_jobs_cycle)

    idx = 0
    for js in jobseekers:
        applied_jobs = set()
        while len(applied_jobs) < 9 and idx < len(all_jobs_cycle):
            job = all_jobs_cycle[idx]
            idx += 1
            # Skip if this job already has 3 apps
            if job_app_count[job.id] >= 3:
                continue
            # Skip duplicate job for same jobseeker
            if job.id in applied_jobs:
                continue

            Application.objects.get_or_create(
                job=job,
                jobseeker=js,
                defaults={
                    "status": random.choice(statuses),
                    "cover_letter": f"I am excited to apply for the {job.title} position.",
                    "applied_at": timezone.now(),
                },
            )

            applied_jobs.add(job.id)
            job_app_count[job.id] += 1

    print(f"✅ Created applications: {Application.objects.count()}")


def remove_applications(apps, schema_editor):
    Application = apps.get_model("jobs", "Application")
    Application.objects.all().delete()

class Migration(migrations.Migration):

    dependencies = [
        ("jobs", "0005_auto_20251021_2006"),
    ]

    operations = [
        migrations.RunPython(create_applications, remove_applications),
    ]
