# Generated by Django 5.2.4 on 2025-10-21 16:40

from django.db import migrations
from django.utils import timezone
import random


def create_jobs(apps, schema_editor):
    Company = apps.get_model("users", "Company")
    CompanyRepresentative = apps.get_model("users", "CompanyRepresentative")
    Job = apps.get_model("jobs", "Job")
    Skill = apps.get_model("jobs", "Skill")

    all_skills = list(Skill.objects.all())

    job_templates = [
        {
            "title": "Software Engineer",
            "description": "Develop and maintain software solutions.",
            "job_type": "full-time",
            "salary_range": "$70,000 - $90,000",
            "remote_status": "Yes",
            "location": "Remote",
        },
        {
            "title": "Data Analyst",
            "description": "Analyze data to support business decisions.",
            "job_type": "full-time",
            "salary_range": "$60,000 - $80,000",
            "remote_status": "No",
            "location": "New York",
        },
        {
            "title": "UI/UX Designer",
            "description": "Design and improve user interfaces and experiences.",
            "job_type": "part-time",
            "salary_range": "$40,000 - $60,000",
            "remote_status": "Yes",
            "location": "Los Angeles",
        },
    ]

    for company in Company.objects.all():
        try:
            rep = CompanyRepresentative.objects.get(company=company)
        except CompanyRepresentative.DoesNotExist:
            continue

        for i, job_data in enumerate(job_templates, start=1):
            job, created = Job.objects.get_or_create(
                company=company,
                title=f"{job_data['title']} ({company.name})",
                defaults={
                    "description": job_data["description"],
                    "location": job_data["location"],
                    "job_type": job_data["job_type"],
                    "salary_range": job_data["salary_range"],
                    "remote_status": job_data["remote_status"],
                    "posted_by": rep,
                    "posted_at": timezone.now(),
                    "is_open": True,
                },
            )

            if created and all_skills:
                # Randomly assign 3â€“5 skills to each job
                selected_skills = random.sample(all_skills, k=min(5, len(all_skills)))
                job.skills.set(selected_skills)

            job.save()


def remove_jobs(apps, schema_editor):
    Job = apps.get_model("jobs", "Job")
    Job.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ("jobs", "0004_auto_20251021_2003"),
    ]

    operations = [
        migrations.RunPython(create_jobs, remove_jobs),
    ]
